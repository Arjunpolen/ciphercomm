import java.io.*;
import java.net.*;
import java.util.*;

public class chatserver {
    private static Set<ClientHandler> clientHandlers = Collections.synchronizedSet(new HashSet<>());

    public static void main(String[] args) throws Exception {
        ServerSocket serversocket = new ServerSocket(1234);
        System.out.println("server is waiting for clients!");

        while (true) {
            Socket socket = serversocket.accept();
            System.out.println("Client connected!");

            ClientHandler clientHandler = new ClientHandler(socket);
            clientHandlers.add(clientHandler);

            Thread t = new Thread(clientHandler);
            t.start();
        }
    }

    public static void broadcast(String encryptedMessage, ClientHandler excludeClient) {
        synchronized (clientHandlers) {
            for (ClientHandler client : clientHandlers) {
                if (client != excludeClient) {
                    client.sendMessage(encryptedMessage);
                }
            }
        }
    }

     static class ClientHandler implements Runnable {
        private Socket socket;
        private BufferedReader in;
        private PrintWriter out;
        
        public ClientHandler(Socket socket) {
            this.socket = socket;
            try {
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream(), true);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
            
        public void run() {
            try {
                String encryptedFromClient, plainFromClient;
                while ((encryptedFromClient = in.readLine()) != null) {
                    if (encryptedFromClient.equalsIgnoreCase("exit")) {
                        System.out.println("Client disconnected");
                        break;
                    }
                    plainFromClient = AESUtil.decrypt(encryptedFromClient);
                    System.out.println("Client: " + plainFromClient);
             
                    broadcast(encryptedFromClient, this);
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    clientHandlers.remove(this);
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
            
        public void sendMessage(String encryptedMessage) {
            out.println(encryptedMessage);
        }
    }
}

